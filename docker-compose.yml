services:
  # 1. Main app service
  frontend:
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: dailygrind_app
    ports:
      - "4173:4173"
    networks:
      - ci_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4173"]
      interval: 5s
      timeout: 2s
      retries: 20

  # 2. Storybook
  storybook:
    image: node:20-bullseye
    working_dir: /app
    environment:
      - CI=true               # prevents interactive prompts / auto-opening
    command: sh -c "corepack enable && corepack prepare pnpm@10.14.0 --activate && pnpm install --frozen-lockfile && pnpm storybook --host 0.0.0.0 -p 6006 --ci"
    volumes:
      - .:/app
    ports:
      - "6006:6006"
    networks:
      - ci_network

  # 3. Tests (unit/integration + E2E)
  vitest:
    build:
      context: .
      dockerfile: docker/vitest.Dockerfile
    depends_on:
      - frontend
    networks:
      - ci_network
    volumes:
      - reports:/app/reports
      - ./src:/app/src
      - ./vitest.config.ts:/app/vitest.config.ts
      - ./package.json:/app/package.json
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml

  playwright:
    build:
      context: .
      dockerfile: docker/playwright.Dockerfile
    depends_on:
      frontend:
        condition: service_healthy
    environment:
      BASE_URL: http://frontend:4173
    networks:
      - ci_network
    volumes:
      - reports:/app/reports
      - ./e2e:/app/e2e  # Mount your test code inside container for test run

  # 4. SonarQube server
  qube:
    image: sonarqube:community
    container_name: sonarqube
    ports:
      - "9000:9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks:
      - ci_network
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions

  # 5. Sonar Scanner
  sonar-scanner:
    build:
      context: .
      dockerfile: docker/sonar-scanner.Dockerfile
    environment:
      SONAR_HOST_URL: http://qube:9000
      SONAR_TOKEN: squ_a14c17adcf0a0cb9c4701a38d7f3c84c444569db
    volumes:
      - .:/usr/src
    working_dir: /usr/src
    depends_on:
      qube:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G
    networks:
      - ci_network

  # 6. Reports viewer (nginx)
  reports-viewer:
    build:
      context: ./docker
      dockerfile: nginx.Dockerfile
    container_name: dailygrind_reports
    ports:
      - "8080:80"
    volumes:
      - reports:/usr/share/nginx/html:ro
    networks:
      - ci_network

networks:
  ci_network:
    name: ci_network
    driver: bridge

volumes:
  reports:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
